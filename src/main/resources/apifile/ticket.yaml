# replace ticket to define the default model covered by this document, first letter must be uppercase
# replace ticket to define the default path of endpoints in this document, first letter must be lowercase
# add missing endpoints
# N.B. : must then be added to the pom to generate the controller and its associated models

openapi: '3.0.0'
info:
  description: 'Ticket API'
  version: '0.0.1'
  title: 'OpenAPI Ticket'
tags:
  - name: Ticket
paths:
  /ticket:
    get:
      tags:
        - Ticket
      summary: 'all Tickets'
      operationId: findAll
      responses:
        '200':
           description: 'OK'
           content:
              application/json:
                schema:
                  type: array
                  items:
                      $ref: '#/components/schemas/TicketOpenApiModel'
    post:
      tags:
        - Ticket
      summary: 'create new ticket'
      operationId: create
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TicketOpenApiModel'
      responses:
        '201':
          description: CREATED
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TicketOpenApiModel'
    put:
      tags:
        - Ticket
      summary: 'Update existing ticket'
      operationId: update
      requestBody:
        description: 'Update existing ticket'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TicketOpenApiModel'

      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TicketOpenApiModel'

        '404':
          description: 'NOT FOUND'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /ticket/{id}:
    get:
      tags:
        - Ticket
      summary: 'Specific ticket'
      operationId: findOne
      parameters:
        - name: id
          in: path
          description: 'Find a ticket by its id'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TicketOpenApiModel'
        '404':
          description: 'NOT FOUND'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - Ticket
      summary: 'delete a Ticket'
      operationId: delete
      parameters:
        - name: id
          in: path
          description: 'Find a ticket by its id'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: DELETED
        '404':
          description: 'NOT FOUND'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /ticket/byFilmProjection:
    get:
      tags:
        - Ticket
      summary: 'Ticket by filmProjection'
      operationId: findByFilmProjection
      parameters:
        - name: filmProjectId
          in: query
          description: 'Find tickets by its film projection'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TicketOpenApiModel'


  /ticket/ticketSold:
    post:
      tags:
        - Ticket
      summary: 'Tickets sold'
      operationId: ticketSold
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TicketReservation'
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TicketOpenApiModel'
        '404':
          description: 'NOT FOUND'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  schemas:
    'TicketOpenApiModel':
      description: 'Object representing a currently accessible ressource'
      type: object
      required:
          - nomClient
          - prix
          - codePayement
          - reservee
          - filmProjectionId
          - placeId
      properties:
        id:
          type: integer
          format: int64
        nomClient:
          type: string
        prix:
          type: number
          format: double
        codePayement:
          type: integer
        reservee:
          type: boolean
        filmProjectionId:
          type: integer
          format: int64
        placeId:
          type: integer
          format: int64

    'TicketReservation':
      description: 'Object representing a currently accessible ressource'
      type: object
      required:
        - nomClient
        - codePayement
        - ticketIds
      properties:
        id:
          type: integer
          format: int64
        nomClient:
          type: string
        codePayement:
          type: integer
        ticketIds:
          type: array
          items:
            type: integer
            format: int64
    Error:
      description: 'format message for error return HTTP'
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
        message:
          type: string






